# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# This file was automatically generated by Natron PyPlug exporter version 8.

# Hand-written code should be added in a separate file named AddMixExt.py
# See http://natron.readthedocs.org/en/master/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from AddMixExt import *
except ImportError:
    pass

def getPluginID():
    return "com.casanico.AddMix"

def getLabel():
    return "AddMix"

def getVersion():
    return 1

def getGrouping():
    return "Merge"

def getPluginDescription():
    return "Outputs Aa + B(1-a) (unpremultiplied over) with curves so you can separately adjust the Aa and (1-a) values. Good for compositing transluscent light sources like flames, sunbeams, white smoke, steam etc. \n\nBe careful not to make pixel values exceed 1.0. \n\nInput A must be UNPREMULTIPLIED!"

def createInstance(app,group):
    # Create all nodes in the group

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setScriptName("Output1")
    lastNode.setLabel("Output1")
    lastNode.setPosition(688, 291)
    lastNode.setSize(80, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "A"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("A")
    lastNode.setLabel("A")
    lastNode.setPosition(443, 28)
    lastNode.setSize(80, 30)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupA = lastNode

    del lastNode
    # End of node "A"

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, group)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(689, 97)
    lastNode.setSize(80, 31)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle1 = lastNode

    param = lastNode.getParam("outputChannelsChoice")
    if param is not None:
        param.setValue("Color.RGBA")
        del param

    param = lastNode.getParam("outputRChoice")
    if param is not None:
        param.setValue("A.r")
        del param

    param = lastNode.getParam("outputGChoice")
    if param is not None:
        param.setValue("A.g")
        del param

    param = lastNode.getParam("outputBChoice")
    if param is not None:
        param.setValue("A.b")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.a")
        del param

    param = lastNode.getParam("outputAChoice")
    if param is not None:
        param.setValue("B.a")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "ChannelMath1"
    lastNode = app.createNode("com.casanico.ChannelMath", 1, group)
    lastNode.setScriptName("ChannelMath1")
    lastNode.setLabel("ChannelMath1")
    lastNode.setPosition(691, 139)
    lastNode.setSize(80, 31)
    lastNode.setColor(0.48, 0.66, 1)
    groupChannelMath1 = lastNode

    param = lastNode.getParam("red")
    if param is not None:
        param.setValue("r*(1-a)")
        del param

    param = lastNode.getParam("green")
    if param is not None:
        param.setValue("g*(1-a)")
        del param

    param = lastNode.getParam("blue")
    if param is not None:
        param.setValue("b*(1-a)")
        del param

    del lastNode
    # End of node "ChannelMath1"

    # Start of node "ChannelMath2"
    lastNode = app.createNode("com.casanico.ChannelMath", 1, group)
    lastNode.setScriptName("ChannelMath2")
    lastNode.setLabel("ChannelMath2")
    lastNode.setPosition(445, 206)
    lastNode.setSize(80, 31)
    lastNode.setColor(0.48, 0.66, 1)
    groupChannelMath2 = lastNode

    param = lastNode.getParam("red")
    if param is not None:
        param.setValue("r*a")
        del param

    param = lastNode.getParam("green")
    if param is not None:
        param.setValue("g*a")
        del param

    param = lastNode.getParam("blue")
    if param is not None:
        param.setValue("b*a")
        del param

    del lastNode
    # End of node "ChannelMath2"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(690, 191)
    lastNode.setSize(80, 52)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("NatronOfxParamStringSublabelName")
    if param is not None:
        param.setValue("plus")
        del param

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("plus")
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(plus)</Natron>")
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "FG_CURVE"
    lastNode = app.createNode("net.sf.openfx.ColorLookupPlugin", 1, group)
    lastNode.setScriptName("FG_CURVE")
    lastNode.setLabel("FG CURVE")
    lastNode.setPosition(442, 150)
    lastNode.setSize(80, 31)
    lastNode.setColor(0.48, 0.66, 1)
    groupFG_CURVE = lastNode

    param = lastNode.getParam("lookupTable")
    if param is not None:
        param.setCurveColor(0, 0.9, 0.9, 0.9)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(0, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.setCurveColor(1, 0.7115, 0.1645, 0.1645)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(1, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.setCurveColor(2, 0, 0.547, 0)
        param.deleteAllControlPoints(2)
        param.addControlPoint(2, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(2, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.setCurveColor(3, 0.2885, 0.2885, 0.8355)
        param.deleteAllControlPoints(3)
        param.addControlPoint(3, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(3, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.setCurveColor(4, 0.399, 0.399, 0.399)
        param.deleteAllControlPoints(4)
        param.addControlPoint(4, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(4, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "FG_CURVE"

    # Start of node "BG_CURVE"
    lastNode = app.createNode("net.sf.openfx.ColorLookupPlugin", 1, group)
    lastNode.setScriptName("BG_CURVE")
    lastNode.setLabel("BG CURVE")
    lastNode.setPosition(554, 101)
    lastNode.setSize(80, 31)
    lastNode.setColor(0.48, 0.66, 1)
    groupBG_CURVE = lastNode

    param = lastNode.getParam("lookupTable")
    if param is not None:
        param.setCurveColor(0, 0.9, 0.9, 0.9)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(0, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.setCurveColor(1, 0.7115, 0.1645, 0.1645)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(1, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.setCurveColor(2, 0, 0.547, 0)
        param.deleteAllControlPoints(2)
        param.addControlPoint(2, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(2, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.setCurveColor(3, 0.2885, 0.2885, 0.8355)
        param.deleteAllControlPoints(3)
        param.addControlPoint(3, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(3, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.setCurveColor(4, 0.399, 0.399, 0.399)
        param.deleteAllControlPoints(4)
        param.addControlPoint(4, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        param.addControlPoint(4, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "BG_CURVE"

    # Start of node "B"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("B")
    lastNode.setLabel("B")
    lastNode.setPosition(690, 22)
    lastNode.setSize(80, 31)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupB = lastNode

    del lastNode
    # End of node "B"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(476, 109)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group

    # Create the user parameters
    lastNode.userNatron = lastNode.createPageParam("userNatron", "User")
    param = lastNode.createParametricParam("FG_CURVElookupTable", "Lookup Table", 5)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setCurveColor(0, 0.9, 0.9, 0.9)
    param.deleteAllControlPoints(0)
    param.addControlPoint(0, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
    param.addControlPoint(0, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
    param.setCurveColor(1, 0.7115, 0.1645, 0.1645)
    param.deleteAllControlPoints(1)
    param.addControlPoint(1, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
    param.addControlPoint(1, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
    param.setCurveColor(2, 0, 0.547, 0)
    param.deleteAllControlPoints(2)
    param.addControlPoint(2, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
    param.addControlPoint(2, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
    param.setCurveColor(3, 0.2885, 0.2885, 0.8355)
    param.deleteAllControlPoints(3)
    param.addControlPoint(3, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
    param.addControlPoint(3, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
    param.setCurveColor(4, 0.399, 0.399, 0.399)
    param.deleteAllControlPoints(4)
    param.addControlPoint(4, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
    param.addControlPoint(4, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
    lastNode.FG_CURVElookupTable = param
    del param

    param = lastNode.createParametricParam("BG_CURVElookupTable", "Lookup Table", 5)

    # Add the param to the page
    lastNode.userNatron.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setCurveColor(0, 0.9, 0.9, 0.9)
    param.deleteAllControlPoints(0)
    param.addControlPoint(0, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
    param.addControlPoint(0, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
    param.setCurveColor(1, 0.7115, 0.1645, 0.1645)
    param.deleteAllControlPoints(1)
    param.addControlPoint(1, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
    param.addControlPoint(1, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
    param.setCurveColor(2, 0, 0.547, 0)
    param.deleteAllControlPoints(2)
    param.addControlPoint(2, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
    param.addControlPoint(2, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
    param.setCurveColor(3, 0.2885, 0.2885, 0.8355)
    param.deleteAllControlPoints(3)
    param.addControlPoint(3, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
    param.addControlPoint(3, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
    param.setCurveColor(4, 0.399, 0.399, 0.399)
    param.deleteAllControlPoints(4)
    param.addControlPoint(4, 0, 0, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
    param.addControlPoint(4, 1, 1, 1, 1, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeCubic)
    lastNode.BG_CURVElookupTable = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Node', 'Settings', 'Info', 'userNatron'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupMerge1)
    groupShuffle1.connectInput(0, groupBG_CURVE)
    groupShuffle1.connectInput(1, groupB)
    groupChannelMath1.connectInput(0, groupShuffle1)
    groupChannelMath2.connectInput(0, groupFG_CURVE)
    groupMerge1.connectInput(0, groupChannelMath1)
    groupMerge1.connectInput(1, groupChannelMath2)
    groupFG_CURVE.connectInput(0, groupDot2)
    groupBG_CURVE.connectInput(0, groupDot2)
    groupDot2.connectInput(0, groupA)

    param = groupFG_CURVE.getParam("lookupTable")
    group.FG_CURVElookupTable.setAsAlias(groupFG_CURVE.getParam("lookupTable"))
    del param
    param = groupBG_CURVE.getParam("lookupTable")
    group.BG_CURVElookupTable.setAsAlias(groupBG_CURVE.getParam("lookupTable"))
    del param

    try:
        extModule = sys.modules["AddMixExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
